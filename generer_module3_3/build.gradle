import org.gradle.plugins.ide.eclipse.model.AccessRule

plugins {
    id 'java'
    id 'eclipse'
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
}

configurations{
    // from: https://discuss.gradle.org/t/how-to-include-dependencies-in-jar/19571/5
	extraLibs
}

dependencies {
    // https://github.com/google/gson
    extraLibs 'com.google.code.gson:gson:2.8.5'

    // DEV: Nitrite for in-memory caching AND disk persistence
    extraLibs group: 'org.dizitart', name: 'nitrite', version: '3.4.1'

    // slf4j no-op logger ; to get rid of error message
    extraLibs 'org.slf4j:slf4j-nop:1.7.30'

    // sff4j simple logger
    //extraLibs 'org.slf4j:slf4j-simple:1.7.30'

    configurations.compile.extendsFrom(configurations.extraLibs)
}

task(genererTutoriel, dependsOn: 'classes', type: JavaExec) {
   main = 'tutoriels.generer_tutoriel3_3.GenerateurTutoriel3_3'
   classpath = sourceSets.main.runtimeClasspath
   jvmArgs('-Dfile.encoding=UTF-8')
}

task(genererAtelier, dependsOn: 'classes', type: JavaExec) {
   main = 'tutoriels.generer_atelier3_3.GenerateurAtelier3_3'
   classpath = sourceSets.main.runtimeClasspath
   jvmArgs('-Dfile.encoding=UTF-8')
}

task(genererTheorie, dependsOn: 'classes', type: JavaExec) {
   main = 'tutoriels.generer_theorie3_3.GenerateurTheorie3_3'
   classpath = sourceSets.main.runtimeClasspath
   jvmArgs('-Dfile.encoding=UTF-8')
}

task genererTout {
    dependsOn 'genererTutoriel'
    dependsOn 'genererAtelier'
    dependsOn 'genererEntrevue'
}

task(testerTutoriel, dependsOn: 'classes', type: JavaExec) {
   main = 'tutoriels.generer_tutoriel3_3.solution.SolutionTutoriel3_3'
   classpath = sourceSets.main.runtimeClasspath
   jvmArgs('-Dfile.encoding=UTF-8')
   standardInput = System.in
}

task(testerAtelier, dependsOn: 'classes', type: JavaExec) {
   main = 'tutoriels.generer_atelier3_3.solution.SolutionAtelier3_3'
   classpath = sourceSets.main.runtimeClasspath
   jvmArgs('-Dfile.encoding=UTF-8')
   standardInput = System.in
}

task(testerTheorie, dependsOn: 'classes', type: JavaExec) {
   main = 'tutoriels.generer_theorie3_3.SolutionTheorie3_3'
   classpath = sourceSets.main.runtimeClasspath
   //jvmArgs('-Dfile.encoding=UTF-8')
   jvmArgs('-Dfile.encoding=UTF-8', '-Djava.compiler=NONE')
   standardInput = System.in
}

// to preserve method parameters names in the *.class
compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'

task (jarTutoriel, dependsOn: 'classes', type: Jar){

	baseName = 'tutoriel3_3'

	from sourceSets.main.output

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

	exclude('tutoriels/generer_*', 'tutoriels/entrevue*', 'tutoriels/atelier*')
}

task (jarAtelier, dependsOn: 'classes', type: Jar){

	baseName = 'atelier3_3'

	from sourceSets.main.output

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

	exclude('tutoriels/generer_*', 'tutoriels/entrevue*', 'tutoriels/tutoriel*')
}

task (jarEntrevue, dependsOn: 'classes', type: Jar){

	baseName = 'entrevue3_3'

	from sourceSets.main.output

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

	exclude('tutoriels/generer_*', 'tutoriels/atelier*', 'tutoriels/tutoriel*')
}

task lesJars {
    dependsOn 'jarTutoriel'
    dependsOn 'jarAtelier'
    dependsOn 'jarEntrevue'
}
